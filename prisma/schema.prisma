datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model dragons {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  name               String             @unique
  description        String
  rarity             Rarity
  familyName         String?
  breedable          Boolean
  elements           Elements[]
  image              String
  thumbnail          String
  code               Int
  createdAt          DateTime?          @default(now())
  updatedAt          DateTime?          @updatedAt
  releaseDate        DateTime?
  baseSpeed          Int
  maxSpeed           Int
  baseLife           Int
  baseAttack         Int
  category           Int
  skills             Skill[]            @relation(fields: [skillsId], references: [id])
  skillsId           String[]           @db.ObjectId
  rating             Rating?
  isVip              Boolean
  hasSkills          Boolean
  skillType          Int?
  skinName           String?
  originalDragonName String?
  isSkin             Boolean
  skinDescription    String?
  hasAllSkins        Boolean
  perkSuggestions    perkSuggestion[]   @relation(fields: [perkSuggestionId], references: [id])
  perkSuggestionId   String[]           @db.ObjectId
  strong             Elements[]
  weak               Elements[]
  UserRating         UserRating[]
  LookingForDragon   LookingForDragon[]
  CanGiveDragon      CanGiveDragon[]
}

model arena {
  id    String     @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  boost Elements[]
  ban   Elements
  chest Elements
}

model Trade {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  lookingFor         LookingForDragon @relation(fields: [lookingForDragonId], references: [id])
  canGive            CanGiveDragon[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  userId             String           @db.ObjectId
  user               User             @relation(fields: [userId], references: [id])
  isVisible          Boolean          @default(true)
  isDeleted          Boolean          @default(false)
  isSponsored        Boolean          @default(false)
  Requests           TradeRequest[]
  handleEssences     HandleEssences   @default(SHARED)
  lookingForDragonId String           @db.ObjectId
}

enum HandleEssences {
  YES
  NO
  SHARED
}

model LookingForDragon {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  dragon    dragons @relation(fields: [dragonsId], references: [id])
  dragonsId String  @db.ObjectId
  orbCount  Int     @default(0)
  Trade     Trade[]
}

model CanGiveDragon {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  dragon     dragons @relation(fields: [dragonsId], references: [id])
  dragonsId  String  @db.ObjectId
  orbCount   Int     @default(0)
  ratioLeft  Int     @default(1)
  ratioRight Int     @default(1)
  Trade      Trade   @relation(fields: [tradeId], references: [id])
  tradeId    String  @db.ObjectId
}

model TradeRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdBy User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String   @db.ObjectId
  trade     Trade    @relation(fields: [tradeId], references: [id])
  tradeId   String   @db.ObjectId

  @@unique([tradeId, userId])
}

model perkSuggestion {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  perk1     Perk?
  perk2     Perk?
  dragons   dragons[] @relation(fields: [dragonsId], references: [id])
  dragonsId String[]  @db.ObjectId

  @@unique([perk1, perk2])
}

enum Perk {
  H
  D
  P
  R
  AH
  AD
  B
  AB
}

model Rating {
  cooldown    Int      @default(0) // Skill Cooldown
  value       Int      @default(0) // Skill yields consistent benefits in proportion to drawbacks if any (health sacrifice, random skill, etc)
  versatility Int      @default(0) // Skill effectiveness in various situations
  potency     Int      @default(0) // Damage potential
  primary     Int      @default(0) // Defensive capability (excluding guards, twds)
  coverage    Int      @default(0) // Offensive capability (points deduced for elements that crit a primary that subsequently crits your own)
  rarity      Int      @default(0) // statboost // useless for now
  usability   Int      @default(0) //  How many of it’s 4 masters arenas can you use it in
  viability   Int      @default(0) //  How many of it’s 4 masters arenas can you use it in
  extra       Int      @default(0) // extra adjustments // useless for now
  score       Int      @default(0) // saved computed score
  overall     Int      @default(0) // overall manual rating
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  notes       String   @default("")
  dragons     dragons? @relation(fields: [dragonsId], references: [id])
  dragonsId   String?  @unique @db.ObjectId
}

model UserRating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  dragons   dragons? @relation(fields: [dragonsId], references: [id])
  dragonsId String?  @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  design    Float?
  arena     Float?

  @@unique([userId, dragonsId])
}

model ownedDragons {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  dragonsId String @db.ObjectId

  @@unique([userId, dragonsId])
}

model Skill {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  skillType   Int
  description String?
  cooldown    Int
  dragons     dragons[] @relation(fields: [dragonsId], references: [id])
  dragonsId   String[]  @db.ObjectId

  @@unique([name, cooldown])
}

enum Elements {
  pu
  d
  f
  wr
  i
  w
  m
  l
  mg
  li
  ch
  el
  ti
  wd
  pr
  e
  p
  hp
  bt
  so
  dr
}

enum Rarity {
  M
  H
  L
  R
  C
  V
  E
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserRating    UserRating[]
  Trade         Trade[]
  TradeRequest  TradeRequest[]
  Contacts      Contact?
}

model Contact {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @unique @db.ObjectId
  discord   String?
  facebook  String?
  twitter   String?
  instagram String?
  reddit    String?
  User      User    @relation(fields: [userId], references: [id])
}

enum Role {
  GOD
  ADMIN
  USER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  roleAssigned      Boolean @default(false) // New field for tracking assigned roles

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
